<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" ><topic xml:lang="en-us" id="topic5247">
<title>HP Helion 1.2 Development Platform: Developing In Ruby</title>
<prolog>
<metadata>
<othermeta name="layout" content="default"/>
<othermeta name="product-version" content="HP Helion Development Platform"/>
<othermeta name="product-version" content="HP Helion Development Platform 1.1"/>
<othermeta name="role" content="Application Developer"/>
<othermeta name="role" content="ISV Developer"/>
<othermeta name="role" content="Service Developer"/>
<othermeta name="role" content="Jayme P"/>
<othermeta name="product-version1" content="HP Helion Development Platform"/>
<othermeta name="product-version2" content="HP Helion Development Platform 1.1"/>
</metadata>
</prolog>
<body>
<p>
<!--UNDER REVISION-->
 <!--./devplatform/1.2/helion/user/deploy/languages/1.2ruby.md-->
 <!--permalink: /helion/devplatform/1.2/als/user/deploy/languages/ruby/--></p>
<p>Whether you're deploying an application to the HP Helion Development Platform, a
Cloud Foundry based Platform as a Service (PaaS), or writing applications that take
advantage of HP Helion OpenStackÂ® to manage infrastructure or software services, tools
to enable successful development are available in Ruby.</p>
<section>
<title>Application Lifecycle Services</title>
<p>Application Lifecycle Services (ALS), a cloud foundry based Platform as a Service,
provides a means to execute ruby applications on a managed platform. Deploying applications to the platform is as simple as adding configuration to a YAML configuration file and using a console application to push the application to ALS.
At its simplest form the configuration file, <i>manifest.yml</i>, at the root of a project would look like:</p>
<codeblock>
  <codeph>name: ruby-web-app
framework:
    type: ruby20&lt;/pre&gt;
</codeph>
</codeblock>
<p>This will tell ALS to have a Ruby web application.
To create a worker non-http application set the web process to null (~) and specify
the command to run. For example,</p>
<codeblock>
  <codeph>name: ruby-app
framework:
  type: rails3
  runtime: ruby19
command: ruby worker.rb
processes:
  web: ~
</codeph>
</codeblock>
<p>Management of the deployed application and its services happens through a web application or a console application.
To learn more see:</p>
<ul>
<li>
<xref href="../../../../../../devplatform/1.2/helion/user/deploy/languages/1.2ruby.dita" >Working with applications in Ruby</xref>
</li>
<li>The <xref href="../../../../../../devplatform/1.2/helion/user/deploy/1.2manifestyml.dita" >manifest.yml</xref> reference.</li>
</ul>
</section>
<section>
<title>HP Helion SDK</title>
<p>Ruby applications can communicate directly with the <xref href="../../../../../../publiccloud/api.dita" >Helion APIs</xref> through a REST client or use the SDK. The SDK is designed to have a simple well documented API to simplify working with the services.
To understand how it works, here is an example of writing and reading from object storage:</p>
<codeblock>
  <codeph>def credentials_hash
  {
    :provider =&gt; :openstack,
    :openstack_auth_url =&gt; ENV['OS_AUTH_URL'],
    :openstack_username =&gt; ENV['OS_USER'],
    :openstack_api_key =&gt; ENV['OS_API_KEY'],
    :openstack_tenant =&gt;  ENV['OS_TENANT'] ,
    :openstack_region =&gt; ENV['OS_REGION']
  }
end

storage = Fog::Storage.new(credentials_hash)

#list directories
storage.directories

#create a directory
storage.directories.create(:key =&gt; "Example")

#create an object
dir = storage.directories.get("Example")
dir.files.create(:key =&gt; "sample.txt", :body =&gt; File.open("/path/to/sample.txt"))

#get the same object out
dir = conn.directories.get("Example")
file = dir.files.get("sample.txt")
file.key   # =&gt; sample.txt
file.content_type # =&gt; text/plain
</codeph>
</codeblock>
<p>
<b>Note</b>: See <xref href="/helion/devplatform/1.2/als/user/deploy/buildpack#buildpacks" >Buildpacks</xref> for an alternative way to deploy Ruby on Rails applications.</p>
</section>
<section>
<title>Using Ruby 2.0</title>
<p>The <i>manifest.yml</i> file must specify the Ruby runtime version and Rails as the
framework type:</p>
<codeblock>
  <codeph>framework:
  runtime: ruby20
</codeph>
</codeblock>
<p>Default Ruby version is Ruby 1.9</p>
</section>
<section>
<title>Known Issues</title>
<ul>
<li>
<p>Rmagick gem currently not supported.</p>
</li>
<li>
<p>PostgreSQL Gem (pg) version must be pinned to 0.12.2 (if used):</p>

<codeblock>
<codeph>gem 'pg', '0.12.2'
</codeph>
</codeblock>
</li>
<li>
<p>Must specify Rake Gem immediately before the line loading rails.
This happens because when Rails loads, it finds version 0.9.2 of
Rake, and that becomes the only version of Rake in the process.
Later code wants version 0.9.2.2, and fails:</p>

<codeblock>
<codeph>gem 'rake', '0.9.2.2'
gem 'rails'
</codeph>
</codeblock>
</li>
<li>
<p>For Ruby 1.9, Cloud Foundry requires a tweak to the jquery-rails gem.</p>

<codeblock>
<codeph>gem 'cloudfoundry-jquery-rails'
</codeph>
</codeblock>
</li>
</ul>
</section>

 
<section>
<title>General Guidelines</title>
</section>
 
 
 
<section>
<title>References</title>
<ul>
<li>
<xref href="http://blog.cloudfoundry.com/2012/03/12/using-cloud-foundry-services-with-ruby-part-1-auto-reconfiguration/" scope="external" format="html" >Auto-Reconfiguration Part
I</xref>:
Cloud Foundry Blog.</li>
<li>
<xref href="http://blog.cloudfoundry.com/2012/03/15/using-cloud-foundry-services-with-ruby-part-2-run-time-support-for-ruby-applications" scope="external" format="html" >Auto-Reconfiguration Part
II</xref>:
Cloud Foundry Blog.</li>
<li>
<xref href="http://docs.cloudfoundry.com/frameworks/ruby/ruby-rails-sinatra" scope="external" format="html" >Working with Ruby, Rails and Sinatra: Things to
know</xref>:
Cloud Foundry Documentation.</li>
</ul>
</section>
</body>
</topic>
